quit
product.product_reviews.new({message: el.text, hash_message: hash_message}).save
product.product_reviews.new({message: el.text, hash_message: hash_message})
quit
product.product_reviews.create({message: el.text, hash_message: hash_message})
product.product_reviews.new
el.text
Digest::SHA256.hexdigest( el.text.mb_chars.downcase.to_s.gsub(/[[:space:]]/, '') )
quit
continue
continue =  Nokogiri::HTML(open(url_request.call(1000))).css("div.customer-review-text").css("div").size != 0
Nokogiri::HTML(open(url_request.call(1000))).css("div.customer-review-text").css("div").size != 0
Nokogiri::HTML(open(url_request.call(1000))).css("div.customer-review-text").css("div").size.methods
Nokogiri::HTML(open(url_request.call(1000))).css("div.customer-review-text").css("div").size
Nokogiri::HTML(open(url_request.call(1000))).css("div.customer-review-text").css("div").map{ |el| p el.text}.size
Nokogiri::HTML(open(url_request.call(page))).css("div.customer-review-text").css("div").map{ |el| p el.text}.size
page_view.css("div.customer-review-text").css("div").map{ |el| p el.text}.size
page_view.css("div.customer-review-text").css("div").map{ |el| p el.text}
page_view.css("div.customer-review-text").css("div").each{ |el| p el.text}
page_view.css("div.customer-review-text").css("div").each{ |el| el.text}
page_view.css("div.customer-review-text").css("div.module")
page_view.css("div.customer-review-text").css("div")
page_view.css("div.ellipsis-content")
page_view.css("div.customer-review-text").css("div.ellipsis-content")
page_view.css("div.customer-review-text").css("div")
page_view.css("div.ellipsis-content")
page_view.css("div.customer-review-text").css("p div.ellipsis-content")
page_view.css("div.customer-review-text").css("div.ellipsis-content")
page_view.css("div.customer-review-text").css("div.ellipsis-content module")
page_view.css("div.customer-review-text").size
page_view.css("div.customer-review-text")
page_view
url_request.call(page)
open(url_request.call(page)
c
url_request
url_request.call(page)
c
Nokogiri::HTML(open(url_request.call(page)))
url_request.call(page)
c
url_request = URI.parse(url)
url_request
url_request.scheme
url_request
url_request.call(page)
quit
"#{uri.scheme}://#{uri.host}/reviews/product/#{product_identificator}?limit=20&page=2&sort=relevancy"
"#{uri.scheme}://#{uri.host}"
"#{uri.scheme}"
uri.fragment
uri.request_uri
uri.methods
uri.host
uri
uri.path.match(/\/ip\/(\S*)\/(\d*)/)[2]
uri.path.match(/\/ip\/(\S*)\/(\d*)/)[1]
uri.path.match(/\/ip\/(\S*)\/(\d*)/)[0]
uri.path.match(/\/ip\/(\S*)\/(\d*)/)
uri.path.gsub(/\/ip\/(\S*)\/(\d*)/).size
uri.path.gsub(/\/ip\/(\S*)\/(\d*)/)
uri.path.gsub(/\/ip\/(\w*)/)
uri.path.gsub(/\/ip\/(\w*)/).size
uri.path.gsub(/\/ip\/(.*)/).size
uri.path.gsub(/\/ip\/(.*)/).methods
uri.path.gsub(/\/ip\/(.*)/)
uri.path.sub(/\/ip\/(.*)/)
uri.path.gsub(/\/ip\/(.*)/)
uri.path.gsub(/\/ip\/(.*)/)[0]
uri.path.gsub(/\/ip\/(.*)/)
uri.path.gsub(/\/ip\//)
uri.path
uri.query
uri.methods
uri = URI.parse(url)
URI.parse(url)
url
c
quit
c
page.css("span[itemprop=price]").attr("content").value
page.css("span[itemprop=price]").attr("content")
page.css("span[itemprop=price]").attr("price")
page.css("span[itemprop=price]").attr
page.css("span[itemprop=price]").methods
page.css("span[itemprop=price]").size
page.css("span[itemprop=price]")
page.css("span.Price").css("span.Price-characteristic").css("span[itemprop=price]")
page.css("span.Price").css("span.Price-characteristic").css("span[itemprop=price]").size
page.css("span.Price").css("span.Price-characteristic").size
page.css("span.Price").css("span.Price-characteristic")
page.css("span.Price-characteristic").size
page.css("span.Price").size
page.css("span.Price")
page.css("span.Pric")
page.css("span.Price-characteristic")
c
product.update(set_product_params)
set_product_params
c
Product.exists?(hash_name: hash_name)
c
Digest::SHA256.hexdigest(name_downcase)
c
Nokogiri::HTML(open(url))
quit
Product.exists?(hash_name: "eb157afa02b41388f19307cec8eb7c461a7c22f9e7fb702abd...")
Product.exists?e(hash_name: "eb157afa02b41388f19307cec8eb7c461a7c22f9e7fb702abd...")
product.update({hash_name: "eb157afa02b41388f19307cec8eb7c461a7c22f9e7fb702abd..."})
product.update({hash_url: "eb157afa02b41388f19307cec8eb7c461a7c22f9e7fb70bd..."})
product.hash_url
product
product = Product.find(product_id)
product
product.hash_url
product.hash
page.css("h1.prod-ProductTitle").css("div").text
page.css("h1.prod-ProductTitle").css("div")
page.css("h1.prod-ProductTitle").size
page.css("h1.prod-ProductTitle")
page.css("h1.prod-ProductTitle ")
page.css("h1.prod-ProductTitle")
page.css("h1.prod-ProductTitle no-margin heading-a")
page.css("<h1 class="prod-ProductTitle no-margin heading-a" itemprop="name" data-reactid=".0.1.1.1.0.0.1.1.6.0.0"><div data-reactid=".0.1.1.1.0.0.1.1.6.0.0.0">Ematic 9" Dual Screen Portable DVD Player with Dual DVD Players (ED929D)</div></h1>")
page.css("div#prod-ProductTitle")
page.css("div.prod-ProductTitle")
page.css("div.prod-ProductTitle").css("div[itemprop=name]")
page.css("div[itemprop=name]").size
page.css("div[itemprop=name]")
page.css("div[itemprop=prod-ProductTitle]")
page.css("div[itemprop=prod-ProductTitle")
page.css("prod-ProductTitle")
page = Nokogiri::HTML(open('https://www.walmart.com/ip/Ematic-9-Dual-Screen-Portable-DVD-Player-with-Dual-DVD-Players-ED929D/28806789'))
page = Nokogiri::HTML(open(url))
require 'open-uri'
Net::HTTP.get('example.com', '/index.html')
URI
Net::HTTP
Net
Net::HTTP
page = Nokogiri::HTML(open(url))
Product.find(product_id)
product_id
c
args
quit
product_params[:url].mb_chars.downcase.to_s
product_params
